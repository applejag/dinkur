// Dinkur the task time tracking utility.
// <https://github.com/dinkur/dinkur>
//
// Copyright (C) 2021 Kalle Fagerberg
// SPDX-FileCopyrightText: 2021 Kalle Fagerberg
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package dinkurapi.v1;

import "api/dinkurapi/v1/entries.proto";
import "api/dinkurapi/v1/event.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/dinkur/dinkur/api/dinkurapi/v1";

// Alerter is a service for Dinkur alerts, such as the AFK alerts.
service Alerter {
  // StreamAlert streams alert change events: created, updated, deleted.
  rpc StreamAlert (StreamAlertRequest) returns (stream StreamAlertResponse);
  // CreateAlert creates a new alert.
  rpc CreateAlert (CreateAlertRequest) returns (CreateAlertResponse);
  // CreateOrUpdateAlert creates a new alert or updates the existing, based on
  // the alert type.
  rpc CreateOrUpdateAlert (CreateOrUpdateAlertRequest)
    returns (CreateOrUpdateAlertResponse);
  // GetAlertList gets a specific alert by its ID. Status 5 "NOT_FOUND" is
  // reported if no alert was found by that ID.
  rpc GetAlertList (GetAlertListRequest) returns (GetAlertListResponse);
  // UpdateAlert creates a new alert.
  rpc UpdateAlert (UpdateAlertRequest) returns (UpdateAlertResponse);
  // DeleteAlert removes a specific alert by its ID. Status 5 "NOT_FOUND" is
  // reported if no alert was found by that ID.
  rpc DeleteAlert (DeleteAlertRequest) returns (DeleteAlertResponse);
  // DeleteAlertType removes an alert by its type. It is undefined which one it
  // will remove if there are multiple alerts of the same type.
  rpc DeleteAlertType (DeleteAlertTypeRequest)
    returns (DeleteAlertTypeResponse);
}

// StreamAlertRequest is an empty message and unused. It is here as a
// placeholder for potential future use.
message StreamAlertRequest {
}

// StreamAlertResponse is an alert event. An alert has been created, updated,
// or deleted.
message StreamAlertResponse {
  // Alert is the created, updated, or deleted alert.
  Alert alert = 1;
  // Event is the type of event.
  Event event = 2;
}

// CreateAlertRequest
message CreateAlertRequest {
  // Alert is the new alert type to create.
  AlertType type = 1;
}

// CreateAlertResponse
message CreateAlertResponse {
  // Alert is the alert that was created.
  Alert alert = 1;
}

// CreateOrUpdateAlertRequest
message CreateOrUpdateAlertRequest {
  // Alert is the new alert type to create.
  AlertType type = 1;
}

// CreateOrUpdateAlertResponse
message CreateOrUpdateAlertResponse {
  // Before is the alert before the update, if any. I.e. will be null/nil if
  // the operation resulting in a created alert.
  Alert before = 1;
  // After is the alert state after the update.
  Alert after = 2;
}

// GetAlertListRequest is an empty message and unused. It is here as a
// placeholder for potential future use.
message GetAlertListRequest {
}

// GetAlertListResponse holds a list of alerts.
message GetAlertListResponse {
  // Alerts is the list of alerts.
  repeated Alert alerts = 1;
}

// UpdateAlertRequest holds the new values to update an alert with, referenced
// by ID.
message UpdateAlertRequest {
  // ID of the alert to update.
  uint64 id = 1;
  // Type is the new values for the alert.
  AlertType type = 2;
}

// UpdateAlertResponse holds the new values for the updated alert.
message UpdateAlertResponse {
  // Alert is the alert that was updated.
  Alert alert = 1;
}

// DeleteAlertRequest holds the ID of the alert to delete.
message DeleteAlertRequest {
  // ID of the alert to delete.
  uint64 id = 1;
}

// DeleteAlertResponse holds the alert that was just deleted.
message DeleteAlertResponse {
  // DeletedAlert is the alert that was just deleted.
  Alert deleted_alert = 1;
}

// DeleteAlertTypeRequest holds the type of the alert to delete.
message DeleteAlertTypeRequest {
  // Type is the type of alert to delete.
  ALERT type = 1;
}

// DeleteAlertTypeResponse holds the alert that was just deleted.
message DeleteAlertTypeResponse {
  // DeletedAlert is the alert that was just deleted.
  Alert deleted_alert = 1;
}

// Alert is a sort of notification issued by the Dinkur daemon, and contains a
// union type of different alert types.
message Alert {
  // Id is the unique identifier of this alert, and is used when deleting an
  // alert via the Alerter service.
  uint64 id = 1;
  // Created is a timestamp of when the alert was initially issued.
  google.protobuf.Timestamp created = 2;
  // Updated is a timestamp of when the alert was most recently changed. This
  // has the same value as when the alert was created if it has never been
  // updated.
  google.protobuf.Timestamp updated = 3;

  // Type holds the inner type of this alert.
  AlertType type = 4;
}

// AlertType is a union type of the inner alert type.
message AlertType {
  // Data holds the inner type of this alert.
  oneof data {
    // PlainMessage means this alert is a plain string message alert.
    AlertPlainMessage plain_message = 1;
    // AFK means this alert is an AFK alert, where the user has been away from
    // their keyboard for too long, and any clients can start idling. The alert
    // also contains information for when the user has returned from being AFK,
    // for which the Dinkur clients are expected to prompt the user for how to
    // save the away time.
    AlertAfk afk = 2;
  }
}

// AlertPlainMessage is an alert subtype that only holds a generic message.
// No user actions are expected. Dinkur clients should show this message and
// let the user dismiss it by deleting the alert.
message AlertPlainMessage {
  // Message is a free text message that can contain any text. No format is
  // assumed.
  string message = 2;
}

// AlertAfk is an alert subtype that is issued when the user has been away from
// their keyboard for too long. Dinkur clients can start idling while this
// alert exists. This alert is automatically deleted when the user is no longer
// AFK. The alert is only issued when the user has an active entry.
//
// Only one instance of this alert may exist at a single time.
message AlertAfk {
  // ActiveEntry is the Dinkur entry that is currently active now that the user
  // is AFK. This field should always be set, as this alert is only issued when
  // the user has an active entry.
  Entry active_entry = 1;
  // AfkSince is a timestamp of when the user went AFK.
  google.protobuf.Timestamp afk_since = 2;
  // BackSince is a timestamp of when the user returned from being AFK.
  // This value is null/nil when the user has not yet returned.
  google.protobuf.Timestamp back_since = 3;
}

// ALERT is an enum of the different alert types.
enum ALERT {
  // ALERT_UNSPECIFIED is the default value and is considered undefined
  // behaviour on usage.
  ALERT_UNSPECIFIED = 0;
  // ALERT_PLAIN_MESSAGE represents the AlertPlainMessage alert type.
  ALERT_PLAIN_MESSAGE = 1;
  // ALERT_AFK represents the AlertAfk alert type.
  ALERT_AFK = 2;
}
