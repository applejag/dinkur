// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatusesClient is the client API for Statuses service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusesClient interface {
	// StreamStatus streams status change events.
	StreamStatus(ctx context.Context, in *StreamStatusRequest, opts ...grpc.CallOption) (Statuses_StreamStatusClient, error)
	// SetStatus updates the current status.
	SetStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*SetStatusResponse, error)
	// GetStatus gets the current status.
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type statusesClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusesClient(cc grpc.ClientConnInterface) StatusesClient {
	return &statusesClient{cc}
}

func (c *statusesClient) StreamStatus(ctx context.Context, in *StreamStatusRequest, opts ...grpc.CallOption) (Statuses_StreamStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Statuses_ServiceDesc.Streams[0], "/dinkurapi.v1.Statuses/StreamStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &statusesStreamStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Statuses_StreamStatusClient interface {
	Recv() (*StreamStatusResponse, error)
	grpc.ClientStream
}

type statusesStreamStatusClient struct {
	grpc.ClientStream
}

func (x *statusesStreamStatusClient) Recv() (*StreamStatusResponse, error) {
	m := new(StreamStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statusesClient) SetStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*SetStatusResponse, error) {
	out := new(SetStatusResponse)
	err := c.cc.Invoke(ctx, "/dinkurapi.v1.Statuses/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusesClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/dinkurapi.v1.Statuses/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusesServer is the server API for Statuses service.
// All implementations must embed UnimplementedStatusesServer
// for forward compatibility
type StatusesServer interface {
	// StreamStatus streams status change events.
	StreamStatus(*StreamStatusRequest, Statuses_StreamStatusServer) error
	// SetStatus updates the current status.
	SetStatus(context.Context, *SetStatusRequest) (*SetStatusResponse, error)
	// GetStatus gets the current status.
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	mustEmbedUnimplementedStatusesServer()
}

// UnimplementedStatusesServer must be embedded to have forward compatible implementations.
type UnimplementedStatusesServer struct {
}

func (UnimplementedStatusesServer) StreamStatus(*StreamStatusRequest, Statuses_StreamStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStatus not implemented")
}
func (UnimplementedStatusesServer) SetStatus(context.Context, *SetStatusRequest) (*SetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedStatusesServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedStatusesServer) mustEmbedUnimplementedStatusesServer() {}

// UnsafeStatusesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusesServer will
// result in compilation errors.
type UnsafeStatusesServer interface {
	mustEmbedUnimplementedStatusesServer()
}

func RegisterStatusesServer(s grpc.ServiceRegistrar, srv StatusesServer) {
	s.RegisterService(&Statuses_ServiceDesc, srv)
}

func _Statuses_StreamStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatusesServer).StreamStatus(m, &statusesStreamStatusServer{stream})
}

type Statuses_StreamStatusServer interface {
	Send(*StreamStatusResponse) error
	grpc.ServerStream
}

type statusesStreamStatusServer struct {
	grpc.ServerStream
}

func (x *statusesStreamStatusServer) Send(m *StreamStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Statuses_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusesServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinkurapi.v1.Statuses/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusesServer).SetStatus(ctx, req.(*SetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statuses_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusesServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinkurapi.v1.Statuses/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusesServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Statuses_ServiceDesc is the grpc.ServiceDesc for Statuses service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Statuses_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dinkurapi.v1.Statuses",
	HandlerType: (*StatusesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStatus",
			Handler:    _Statuses_SetStatus_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Statuses_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStatus",
			Handler:       _Statuses_StreamStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/dinkurapi/v1/statuses.proto",
}
